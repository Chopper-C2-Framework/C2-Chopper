// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tracking.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrackingService_GetsAllCreds_FullMethodName = "/TrackingService/GetsAllCreds"
	TrackingService_GetHostInfo_FullMethodName  = "/TrackingService/GetHostInfo"
	TrackingService_GetHosts_FullMethodName     = "/TrackingService/GetHosts"
)

// TrackingServiceClient is the client API for TrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackingServiceClient interface {
	GetsAllCreds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredsResponse, error)
	GetHostInfo(ctx context.Context, in *GetHostInfoRequest, opts ...grpc.CallOption) (*GetHostInfoResponse, error)
	GetHosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetHostsResponse, error)
}

type trackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingServiceClient(cc grpc.ClientConnInterface) TrackingServiceClient {
	return &trackingServiceClient{cc}
}

func (c *trackingServiceClient) GetsAllCreds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredsResponse, error) {
	out := new(GetCredsResponse)
	err := c.cc.Invoke(ctx, TrackingService_GetsAllCreds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServiceClient) GetHostInfo(ctx context.Context, in *GetHostInfoRequest, opts ...grpc.CallOption) (*GetHostInfoResponse, error) {
	out := new(GetHostInfoResponse)
	err := c.cc.Invoke(ctx, TrackingService_GetHostInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServiceClient) GetHosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetHostsResponse, error) {
	out := new(GetHostsResponse)
	err := c.cc.Invoke(ctx, TrackingService_GetHosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServiceServer is the server API for TrackingService service.
// All implementations must embed UnimplementedTrackingServiceServer
// for forward compatibility
type TrackingServiceServer interface {
	GetsAllCreds(context.Context, *emptypb.Empty) (*GetCredsResponse, error)
	GetHostInfo(context.Context, *GetHostInfoRequest) (*GetHostInfoResponse, error)
	GetHosts(context.Context, *emptypb.Empty) (*GetHostsResponse, error)
	mustEmbedUnimplementedTrackingServiceServer()
}

// UnimplementedTrackingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackingServiceServer struct {
}

func (UnimplementedTrackingServiceServer) GetsAllCreds(context.Context, *emptypb.Empty) (*GetCredsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetsAllCreds not implemented")
}
func (UnimplementedTrackingServiceServer) GetHostInfo(context.Context, *GetHostInfoRequest) (*GetHostInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostInfo not implemented")
}
func (UnimplementedTrackingServiceServer) GetHosts(context.Context, *emptypb.Empty) (*GetHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHosts not implemented")
}
func (UnimplementedTrackingServiceServer) mustEmbedUnimplementedTrackingServiceServer() {}

// UnsafeTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingServiceServer will
// result in compilation errors.
type UnsafeTrackingServiceServer interface {
	mustEmbedUnimplementedTrackingServiceServer()
}

func RegisterTrackingServiceServer(s grpc.ServiceRegistrar, srv TrackingServiceServer) {
	s.RegisterService(&TrackingService_ServiceDesc, srv)
}

func _TrackingService_GetsAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).GetsAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackingService_GetsAllCreds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).GetsAllCreds(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingService_GetHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).GetHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackingService_GetHostInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).GetHostInfo(ctx, req.(*GetHostInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingService_GetHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).GetHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackingService_GetHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).GetHosts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackingService_ServiceDesc is the grpc.ServiceDesc for TrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrackingService",
	HandlerType: (*TrackingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetsAllCreds",
			Handler:    _TrackingService_GetsAllCreds_Handler,
		},
		{
			MethodName: "GetHostInfo",
			Handler:    _TrackingService_GetHostInfo_Handler,
		},
		{
			MethodName: "GetHosts",
			Handler:    _TrackingService_GetHosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracking.proto",
}
