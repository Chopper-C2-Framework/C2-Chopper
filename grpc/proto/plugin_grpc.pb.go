// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginService_ListLoadedPlugins_FullMethodName = "/PluginService/ListLoadedPlugins"
	PluginService_ListPlugins_FullMethodName       = "/PluginService/ListPlugins"
	PluginService_RunPlugin_FullMethodName         = "/PluginService/RunPlugin"
	PluginService_LoadPlugin_FullMethodName        = "/PluginService/LoadPlugin"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	ListLoadedPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error)
	ListPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error)
	RunPlugin(ctx context.Context, in *RunPluginRequest, opts ...grpc.CallOption) (*RunPluginResponse, error)
	LoadPlugin(ctx context.Context, in *LoadPluginRequest, opts ...grpc.CallOption) (*LoadPluginResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) ListLoadedPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error) {
	out := new(ListPluginsResponse)
	err := c.cc.Invoke(ctx, PluginService_ListLoadedPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ListPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error) {
	out := new(ListPluginsResponse)
	err := c.cc.Invoke(ctx, PluginService_ListPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) RunPlugin(ctx context.Context, in *RunPluginRequest, opts ...grpc.CallOption) (*RunPluginResponse, error) {
	out := new(RunPluginResponse)
	err := c.cc.Invoke(ctx, PluginService_RunPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) LoadPlugin(ctx context.Context, in *LoadPluginRequest, opts ...grpc.CallOption) (*LoadPluginResponse, error) {
	out := new(LoadPluginResponse)
	err := c.cc.Invoke(ctx, PluginService_LoadPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	ListLoadedPlugins(context.Context, *emptypb.Empty) (*ListPluginsResponse, error)
	ListPlugins(context.Context, *emptypb.Empty) (*ListPluginsResponse, error)
	RunPlugin(context.Context, *RunPluginRequest) (*RunPluginResponse, error)
	LoadPlugin(context.Context, *LoadPluginRequest) (*LoadPluginResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) ListLoadedPlugins(context.Context, *emptypb.Empty) (*ListPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadedPlugins not implemented")
}
func (UnimplementedPluginServiceServer) ListPlugins(context.Context, *emptypb.Empty) (*ListPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedPluginServiceServer) RunPlugin(context.Context, *RunPluginRequest) (*RunPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPlugin not implemented")
}
func (UnimplementedPluginServiceServer) LoadPlugin(context.Context, *LoadPluginRequest) (*LoadPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPlugin not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_ListLoadedPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ListLoadedPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ListLoadedPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ListLoadedPlugins(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ListPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ListPlugins(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_RunPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).RunPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_RunPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).RunPlugin(ctx, req.(*RunPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_LoadPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).LoadPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_LoadPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).LoadPlugin(ctx, req.(*LoadPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLoadedPlugins",
			Handler:    _PluginService_ListLoadedPlugins_Handler,
		},
		{
			MethodName: "ListPlugins",
			Handler:    _PluginService_ListPlugins_Handler,
		},
		{
			MethodName: "RunPlugin",
			Handler:    _PluginService_RunPlugin_Handler,
		},
		{
			MethodName: "LoadPlugin",
			Handler:    _PluginService_LoadPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
