// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: listener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListenerServiceClient is the client API for ListenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenerServiceClient interface {
	ListListeners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListenerListResponse, error)
	GetListenerInfo(ctx context.Context, in *GetListenerInfoRequest, opts ...grpc.CallOption) (*GetListenerInfoResponse, error)
	ExecuteCmd(ctx context.Context, in *ExecuteCmdRequest, opts ...grpc.CallOption) (*ExecuteCmdResponse, error)
}

type listenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerServiceClient(cc grpc.ClientConnInterface) ListenerServiceClient {
	return &listenerServiceClient{cc}
}

func (c *listenerServiceClient) ListListeners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListenerListResponse, error) {
	out := new(ListenerListResponse)
	err := c.cc.Invoke(ctx, "/ListenerService/ListListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerServiceClient) GetListenerInfo(ctx context.Context, in *GetListenerInfoRequest, opts ...grpc.CallOption) (*GetListenerInfoResponse, error) {
	out := new(GetListenerInfoResponse)
	err := c.cc.Invoke(ctx, "/ListenerService/GetListenerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerServiceClient) ExecuteCmd(ctx context.Context, in *ExecuteCmdRequest, opts ...grpc.CallOption) (*ExecuteCmdResponse, error) {
	out := new(ExecuteCmdResponse)
	err := c.cc.Invoke(ctx, "/ListenerService/ExecuteCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerServiceServer is the server API for ListenerService service.
// All implementations must embed UnimplementedListenerServiceServer
// for forward compatibility
type ListenerServiceServer interface {
	ListListeners(context.Context, *emptypb.Empty) (*ListenerListResponse, error)
	GetListenerInfo(context.Context, *GetListenerInfoRequest) (*GetListenerInfoResponse, error)
	ExecuteCmd(context.Context, *ExecuteCmdRequest) (*ExecuteCmdResponse, error)
	mustEmbedUnimplementedListenerServiceServer()
}

// UnimplementedListenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListenerServiceServer struct {
}

func (UnimplementedListenerServiceServer) ListListeners(context.Context, *emptypb.Empty) (*ListenerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListeners not implemented")
}
func (UnimplementedListenerServiceServer) GetListenerInfo(context.Context, *GetListenerInfoRequest) (*GetListenerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerInfo not implemented")
}
func (UnimplementedListenerServiceServer) ExecuteCmd(context.Context, *ExecuteCmdRequest) (*ExecuteCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCmd not implemented")
}
func (UnimplementedListenerServiceServer) mustEmbedUnimplementedListenerServiceServer() {}

// UnsafeListenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerServiceServer will
// result in compilation errors.
type UnsafeListenerServiceServer interface {
	mustEmbedUnimplementedListenerServiceServer()
}

func RegisterListenerServiceServer(s grpc.ServiceRegistrar, srv ListenerServiceServer) {
	s.RegisterService(&ListenerService_ServiceDesc, srv)
}

func _ListenerService_ListListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServiceServer).ListListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ListenerService/ListListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServiceServer).ListListeners(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenerService_GetListenerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServiceServer).GetListenerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ListenerService/GetListenerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServiceServer).GetListenerInfo(ctx, req.(*GetListenerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenerService_ExecuteCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServiceServer).ExecuteCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ListenerService/ExecuteCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServiceServer).ExecuteCmd(ctx, req.(*ExecuteCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListenerService_ServiceDesc is the grpc.ServiceDesc for ListenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ListenerService",
	HandlerType: (*ListenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListListeners",
			Handler:    _ListenerService_ListListeners_Handler,
		},
		{
			MethodName: "GetListenerInfo",
			Handler:    _ListenerService_GetListenerInfo_Handler,
		},
		{
			MethodName: "ExecuteCmd",
			Handler:    _ListenerService_ExecuteCmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listener.proto",
}
